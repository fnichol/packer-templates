#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

Signal.trap("INT") { exit 1 }

$stdout.sync = true
$stderr.sync = true

require 'optparse'
require 'ostruct'
require 'benchmark'

class Options

  def self.parse(args)
    options = OpenStruct.new
    options.templates = Dir.glob("*.json").sort.
      delete_if { |file| file =~ /_variables\./ }.
      map { |template| template.sub(/\.json$/, '') }

    ENV['PACKER_CACHE_DIR'] = "packer_cache"

    OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename($0)} [options] TEMPLATE[ TEMPLATE ...]"

      opts.on("-l", "--list", "List all templates in project") do |opt|
        options.list = opt
      end

      opts.on("-n", "--[no-]dry-run", "Dry run (what would happen)") do |opt|
        options.dry_run = opt
      end

      opts.on("-d", "--[no-]debug", "Run packer with debug output") do |opt|
        options.debug = opt
      end

      opts.on("-o BUILDS", "--only BUILDS", "Only build the given packer builds") do |opt|
        options.builds = opt
      end
    end.parse!(args)

    options.templates = args unless args.empty?

    options.templates.each do |t|
      if !File.exists?("#{t}.json")
        $stderr.puts "File #{t}.json does not exist for template '#{t}'"
        exit(1)
      end
    end

    options
  end
end

class Builder

  attr_reader :templates, :dry_run, :debug, :builds, :list

  def initialize(opts)
    @templates = opts.templates
    @dry_run = opts.dry_run
    @debug = opts.debug
    @builds = opts.builds
    @list = opts.list
  end

  def start
    return list_templates if list

    banner("Starting builder for templates: #{templates}")
    time = Benchmark.measure do
      templates.each { |template| packer(template) }
    end
    banner("Builder finished in #{duration(time.real)}.")
  end

  def packer(template)
    cmd = packer_cmd(template)
    banner("[#{template}] Running: '#{cmd.join(' ')}'")
    time = Benchmark.measure do
      system(*cmd) or raise "[#{template}] Error building, exited #{$?}"
    end
    banner("[#{template}] Finished in #{duration(time.real)}.")
  end

  def packer_cmd(template)
    vars = "#{template}_variables.json"
    cmd = %W[packer build #{template}.json]
    cmd.insert(2, "-var-file=#{vars}") if File.exist?(vars)
    cmd.insert(2, "-only=#{builds}") if builds
    cmd.insert(2, "--debug") if debug
    cmd.insert(0, "echo") if dry_run
    cmd
  end

  def banner(msg)
    puts "-------> #{msg}"
  end

  def duration(total)
    total = 0 if total.nil?
    minutes = (total / 60).to_i
    seconds = (total - (minutes * 60))
    format("%dm%.2fs", minutes, seconds)
  end

  def list_templates
    templates.each { |template| puts template }
  end
end

begin
  Builder.new(Options.parse(ARGV)).start
rescue => ex
  $stderr.puts ">>>>>>>> #{ex.message}"
  exit(($? && $?.exitstatus) || 99)
end
