#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

Signal.trap("INT") { exit 1 }

$stdout.sync = true
$stderr.sync = true

require 'optparse'
require 'ostruct'
require 'benchmark'

class Options

  def self.parse(args)
    options = OpenStruct.new
    options.templates = Dir.glob("**/template.json").sort.
      map { |file| File.dirname(file) }

    ENV['PACKER_CACHE_DIR'] = "../packer_cache"

    OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename($0)} [options] TEMPLATE[ TEMPLATE ...]"

      opts.on("-n", "--[no-]dry-run", "Dry run (what would happen)") do |opt|
        options.dry_run = opt
      end

      opts.on("-d", "--[no-]debug", "Run packer with debug output") do |opt|
        options.debug = opt
      end
    end.parse!(args)

    options.templates = args unless args.empty?

    options.templates.each do |t|
      if !File.exists?("#{t}/template.json")
        $stderr.puts "File #{t}/template.json does not exist for template '#{t}'"
        exit(1)
      end
    end

    options
  end
end

class Builder

  attr_reader :templates, :dry_run, :debug

  def initialize(opts)
    @templates, @dry_run, @debug = opts.templates, opts.dry_run, opts.debug
  end

  def start
    banner("Starting builder for templates: #{templates}")
    time = Benchmark.measure do
      templates.each { |template| Dir.chdir(template) { packer(template) } }
    end
    banner("Builder finished in #{time.real} seconds.")
  end

  def packer(template)
    banner("[#{template}] Running: '#{packer_cmd.join(' ')}'")
    time = Benchmark.measure do
      system(*packer_cmd) or raise "[#{template}] Error building, exited #{$?}"
    end
    banner("[#{template}] Finished in #{time.real} seconds.")
  end

  def packer_cmd
    cmd = %w[packer build template.json]
    cmd.insert(2, "--debug") if debug
    cmd.insert(0, "echo") if dry_run
    cmd
  end

  def banner(msg)
    puts "-------> #{msg}"
  end
end

begin
  Builder.new(Options.parse(ARGV)).start
rescue => ex
  $stderr.puts ">>>>>>>> #{ex.message}"
  exit(($? && $?.exitstatus) || 99)
end
